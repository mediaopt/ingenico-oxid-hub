#!/usr/bin/env php
<?php

if ( !isset( $argv[1] ) )
{
    echo "Please reference a XML file containing the OXID metrics report.\n";
    exit( 1 );
}

$doc = new DOMDocument();
$doc->load( $argv[1] );

$xpath  = new DOMXPath( $doc );
$values = array(
    'CyclomaticComplexity' => 0,
    'Coverage'             => 100,
    'CrapIndex'            => 0,
    'NPathComplexity'      => 0,
);

foreach ( $xpath->query( '//file' ) as $file )
{
    echo $file->getAttribute( 'name' ), "\n";

    foreach ( $xpath->query( './violation', $file ) as $violation )
    {
        echo ' - ', $violation->getAttribute( 'ruleset' ), ': ', trim( $violation->nodeValue ), "\n";

        $value = (float) preg_replace( '(^.*?(\\d+(?:\\.\\d+)?).*$)', '$1', trim( $violation->nodeValue ) );
        switch ( $rule = $violation->getAttribute( 'rule' ) )
        {
            case 'CyclomaticComplexity':
            case 'CrapIndex':
            case 'NPathComplexity':
                $values[$rule] = max( $values[$rule], $value );
                break;

            case 'Coverage':
                $values[$rule] = min( $values[$rule], $value );
                break;

            default:
                // Ignore other metrics for now.
        }
    }
}

$factor =
    max( 1, ( $values['CrapIndex'] - 20 ) / 10 ) *
    max( 1, ( $values['CyclomaticComplexity'] - 3 ) / 1 ) *
    max( 1, ( $values['NPathComplexity'] - 100 ) / 100 );

printf(
    "\nModule cetrification costs: %sâ‚¬\n",
    number_format( 119 + 200 * $factor, 2 )
);

if ( ( $values['NPathComplexity'] > 500 ) ||
     ( $values['CyclomaticComplexity'] > 8 ) ||
     ( $values['Coverage'] < 90 ) )
{
    echo "\nModule won't be certified because of its metric results.\n";
    exit( 1 );
}

